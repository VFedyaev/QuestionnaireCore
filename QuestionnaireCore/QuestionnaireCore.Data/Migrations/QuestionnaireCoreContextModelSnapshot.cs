// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuestionnaireCore.Data;

namespace QuestionnaireCore.Data.Migrations
{
    [DbContext(typeof(QuestionnaireCoreContext))]
    partial class QuestionnaireCoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("QuestionnaireCore.Data.Entities.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Answer");
                });

            modelBuilder.Entity("QuestionnaireCore.Data.Entities.Data", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<int>("FormId");

                    b.Property<int>("QuestionAnswerId");

                    b.Property<int>("QuestionId");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("QuestionAnswerId");

                    b.ToTable("Data");
                });

            modelBuilder.Entity("QuestionnaireCore.Data.Entities.District", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("District");
                });

            modelBuilder.Entity("QuestionnaireCore.Data.Entities.Family", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("Age");

                    b.Property<int>("FormId");

                    b.Property<string>("Sex");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.ToTable("Family");
                });

            modelBuilder.Entity("QuestionnaireCore.Data.Entities.Form", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<short?>("DistrictId");

                    b.Property<DateTime?>("EndTime");

                    b.Property<short>("HousingTypeId");

                    b.Property<DateTime>("InterviewDate");

                    b.Property<short>("InterviewerId");

                    b.Property<int>("NumberForm");

                    b.Property<string>("Phone");

                    b.Property<DateTime>("StartTime");

                    b.Property<short>("SurveyGeographyId");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("HousingTypeId");

                    b.HasIndex("InterviewerId");

                    b.HasIndex("NumberForm");

                    b.HasIndex("SurveyGeographyId");

                    b.ToTable("Form");
                });

            modelBuilder.Entity("QuestionnaireCore.Data.Entities.HousingType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("HousingType");
                });

            modelBuilder.Entity("QuestionnaireCore.Data.Entities.Interviewer", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Phone");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Interviewer");
                });

            modelBuilder.Entity("QuestionnaireCore.Data.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("MultipleAnswer");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<short>("QuestionTypeId");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("QuestionTypeId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("QuestionnaireCore.Data.Entities.QuestionAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnswerId");

                    b.Property<int>("QuestionId");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionAnswer");
                });

            modelBuilder.Entity("QuestionnaireCore.Data.Entities.QuestionType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("QuestionType");
                });

            modelBuilder.Entity("QuestionnaireCore.Data.Entities.SurveyGeography", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("SurveyGeography");
                });

            modelBuilder.Entity("QuestionnaireCore.Data.Entities.Data", b =>
                {
                    b.HasOne("QuestionnaireCore.Data.Entities.Form", "Form")
                        .WithMany()
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("QuestionnaireCore.Data.Entities.QuestionAnswer", "QuestionAnswer")
                        .WithMany()
                        .HasForeignKey("QuestionAnswerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("QuestionnaireCore.Data.Entities.Family", b =>
                {
                    b.HasOne("QuestionnaireCore.Data.Entities.Form", "Form")
                        .WithMany()
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("QuestionnaireCore.Data.Entities.Form", b =>
                {
                    b.HasOne("QuestionnaireCore.Data.Entities.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("QuestionnaireCore.Data.Entities.HousingType", "HousingType")
                        .WithMany()
                        .HasForeignKey("HousingTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("QuestionnaireCore.Data.Entities.Interviewer", "Interviewer")
                        .WithMany()
                        .HasForeignKey("InterviewerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("QuestionnaireCore.Data.Entities.SurveyGeography", "SurveyGeography")
                        .WithMany()
                        .HasForeignKey("SurveyGeographyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("QuestionnaireCore.Data.Entities.Question", b =>
                {
                    b.HasOne("QuestionnaireCore.Data.Entities.QuestionType", "QuestionType")
                        .WithMany()
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("QuestionnaireCore.Data.Entities.QuestionAnswer", b =>
                {
                    b.HasOne("QuestionnaireCore.Data.Entities.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("QuestionnaireCore.Data.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
